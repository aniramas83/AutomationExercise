// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automation.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TaxCalculator")]
    public partial class TaxCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TaxCalculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TaxCalculator", "On the ATO page https://www.ato.gov.au/Calculators-and-tools/Host/?anchor=STC&anc" +
                    "hor=STC#STC/questions \r\n•\tNavigate to the page\r\n•\tCreate a test to verify calcul" +
                    "ated tax for at least three combinations of assessment year, Income and residenc" +
                    "y status ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tax calculator validation")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.TestCaseAttribute("2018-19", "500000", "Resident for full year", "", null)]
        [NUnit.Framework.TestCaseAttribute("2017-18", "75000", "Non-resident for full year", "", null)]
        [NUnit.Framework.TestCaseAttribute("2016-17", "80000", "Part-year resident", "2", null)]
        public virtual void TaxCalculatorValidation(string year, string amount, string residency, string numberOfMonths, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tax calculator validation", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("I am at the tax calculator page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Value"});
                table3.AddRow(new string[] {
                            "Year",
                            string.Format("{0}", year)});
                table3.AddRow(new string[] {
                            "Amount",
                            string.Format("{0}", amount)});
                table3.AddRow(new string[] {
                            "Residency",
                            string.Format("{0}", residency)});
                table3.AddRow(new string[] {
                            "NumberOfMonths",
                            string.Format("{0}", numberOfMonths)});
#line 9
 testRunner.When("I enter all required options as:", ((string)(null)), table3, "When ");
#line hidden
#line 15
 testRunner.Then("I verify the tax calculation is not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Loan calculator validation")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.TestCaseAttribute("Single", "0", "Home to live in", "80,000", "10,000", "500", "0", "140", "0", "10,000", null)]
        public virtual void LoanCalculatorValidation(string type, string dependants, string purpose, string income, string otherIncome, string expense, string hlRepay, string otherLoan, string commitments, string creditCardLimit, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Loan calculator validation", null, @__tags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.Given("I am at loan calculator page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Value"});
                table4.AddRow(new string[] {
                            "ApplicationType",
                            string.Format("{0}", type)});
                table4.AddRow(new string[] {
                            "Dependants",
                            string.Format("{0}", dependants)});
                table4.AddRow(new string[] {
                            "PropertyPurpose",
                            string.Format("{0}", purpose)});
                table4.AddRow(new string[] {
                            "IncomeBeforeTax",
                            string.Format("{0}", income)});
                table4.AddRow(new string[] {
                            "OtherIncome",
                            string.Format("{0}", otherIncome)});
                table4.AddRow(new string[] {
                            "LivingExpenses",
                            string.Format("{0}", expense)});
                table4.AddRow(new string[] {
                            "CurrentHlRepay",
                            string.Format("{0}", hlRepay)});
                table4.AddRow(new string[] {
                            "OtherLoanRepay",
                            string.Format("{0}", otherLoan)});
                table4.AddRow(new string[] {
                            "OtherCommitments",
                            string.Format("{0}", commitments)});
                table4.AddRow(new string[] {
                            "CreditCardLimit",
                            string.Format("{0}", creditCardLimit)});
#line 26
 testRunner.When("I enter all required income details as:", ((string)(null)), table4, "When ");
#line hidden
#line 38
 testRunner.Then("I verify the tax calculation is not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
